---
# Tower general config
tower_username: admin
tower_password: "{{ tower_password }}"
tower_projects_root: "/var/lib/awx/projects"
tower_user_add: true
tower_host: "{{ ansible_host }}"

# Tower CLI config
tower_cli_credentials_config: true
tower_cli_credentials_keep: true
tower_cli_verbosity: "--verbose"
tower_cli_user: cli_user
tower_cli_password: cli_pass1234

# Tower prerequisites
tower_prereqs_config: false

# Tower License
tower_license_config: true
tower_license:
  company_name: "Example"
  contact_email: "license@example.com"
  contact_name: "Example license"
  hostname: "example"
  instance_count: 1234
  license_date: 12345678
  license_key: "example_license_key_replace_me"
  license_type: "enterprise"
  subscription_name: "Example Subscription Name"
  eula_accepted: true
  trial: true

# Tower Organizations
tower_organisations:
  - name: openshift_demo
  - name: "another demo"
tower_organisations_config: true

# Tower Credentials (valid kinds are ssh,net,scm,aws,rax,vmware,satellite6,cloudforms,gce,azure,azure_rm,openstack)
tower_credentials_config: true
tower_credentials:
  - name: "TOWER SSH"
    description: SSH Key for tower machine access
    kind: ssh
    ssh_key_data: "/root/.ssh/id_rsa"
    username: root
    organisation: openshift_demo
  - name: "GIT SSH"
    description: SSH Key for gitlab access
    kind: scm
    ssh_key_data: "/root/.ssh/id_rsa"
    username: git
    organisation: openshift_demo

tower_inventories_config: true
tower_inventories:
  - name: Tower_config
    description: tower base config inventory
    project: <project>
  - name: Tower_config
    description: tower base config inventory
    project: <project>
    
# Tower inventory
tower_inventory: "OpenShift"
tower_inventory_config: true
tower_inventory_description: "Inventory for all AWS Instances"
tower_inventory_group: "AWS"
tower_inventory_group_config: true
tower_inventory_group_description: "AWS dynamic inventory"
tower_inventory_group_source: "ec2"
tower_inventory_group_update_on_launch: "yes"
tower_inventory_group_overwrite: "no"
tower_inventory_group_source_vars:
  regions: "{{ aws_region }}"
  destination_format: "{0}"
  destination_format_tags: "Name"
tower_inventory_sync: true
tower_openshift_install_group: "OSEv3"
tower_openshift_install_group_config: false
tower_openshift_install_group_description: "All OCP nodes"
tower_openshift_masters_group: "masters"
tower_openshift_masters_group_config: false
tower_openshift_masters_description: "OCP masters"
tower_openshift_nodes_group: "nodes"
tower_openshift_nodes_group_config: false
tower_openshift_nodes_description: "OCP nodes"
tower_master_tag: "tag_lab_role_master"
tower_master_tag_description: "nodes with the tag 'tag_lab_role_master'"
tower_node_tag: "tag_lab_role_node"
tower_node_tag_description: "nodes with the tag 'tag_lab_role_node'"

# Tower Projects
tower_projects_configure: true
tower_projects:
  - name: "Managing OCP from Install and Beyond"
    description: "Git repo with Ansible playbooks for provision (pre-install) and configure (post-install)"
    organization: "Default"
    kind: "provision"
    config: true
    scm_type: "git"
    url: "https://github.com/sabre1041/managing-ocp-install-beyond.git"
    branch: "rhte"
    clean: "yes"
    update_on_launch: false
    delete_on_update: false
  - name: "openshift-ansible"
    description: "Red Hat OpenShift Container Platform Ansible Playbooks"
    organization: "Default"
    kind: "install"
    config: false
    scm_type: "manual"
    url: ""
    branch: ""
    package: "openshift-ansible-playbooks"
    local_path: "share"

# Tower Templates
tower_templates_config: true
tower_templates:
  - name: "0-Self-Configure"
    description: "Tower self-configure"
    project: "{{ tower_project_provision_and_configure }}"
    playbook: "tower_config.yml"
    config: true
    limit: "localhost"
    extra_vars_path: "tower_job_template_self_configure_extra_vars.yml.j2"
    job_template: "copy"
  - name: "Deploy-1-Provision"
    description: "Deployment Step 1 - Creates AWS instances to be used as an OCP cluster in later job templates"
    project: "{{ tower_project_provision_and_configure }}"
    playbook: "aws_create_hosts.yml"
    config: false
    extra_vars_path: "tower_job_template_deploy_provision_extra_vars.yml.j2"
    job_template: "copy"
  - name: "Deploy-2-Install"
    description: "Deployment Step 2 - Installs OpenShift Container Platform"
    project: "{{ tower_project_provision_and_configure }}"
    playbook: "ansible/openshift-ansible/playbooks/byo/config.yml"
    config: false
    become_enabled: "yes"
    job_template: "copy"
  - name: "Deploy-3-Post-Install"
    description: "Deployment Step 3 - Post-install configuration"
    project: "{{ tower_project_provision_and_configure }}"
    playbook: "openshift_postinstall.yml"
    config: false
    become_enabled: "yes"
    job_template: "no"
  - name: "Scaleup-1-Provision"
    description: "Scaleup Step 1 - Creates AWS instance to be added to the existing OCP cluster"
    project: "{{ tower_project_provision_and_configure }}"
    playbook: "aws_add_node.yml"
    config: false
    extra_vars_path: "tower_job_template_deploy_provision_extra_vars.yml.j2"
    job_template: "copy"
  - name: "Scaleup-2-Install"
    description: "Scaleup Step 2 - Add instance as a node to existing OCP cluster"
    project: "{{ tower_project_provision_and_configure }}"
    playbook: "ansible/openshift-ansible/playbooks/byo/openshift-node/scaleup.yml"
    config: false
    become_enabled: "yes"
    job_template: "no"
  - name: "Scaleup-3-Post-Install"
    description: "Scaleup Step 3 Post-Install configuration"
    project: "{{ tower_project_provision_and_configure }}"
    playbook: "openshift_postinstall.yml"
    config: false
    become_enabled: "yes"
    job_template: "no"
  - name: "Terminate-OCP"
    description: "Terminate all OpenShift masters and nodes"
    project: "{{ tower_project_provision_and_configure }}"
    playbook: "aws_terminate_instances.yml"
    config: false
    extra_vars: "terminate_tower=false tower_password={{ tower_password }} tower_inventory={{ tower_inventory }} aws_region={{ aws_region }}"
    job_template: "update"
  - name: "Terminate-All"
    description: "Terminate all instances including Tower"
    project: "{{ tower_project_provision_and_configure }}"
    playbook: "aws_terminate_instances.yml"
    config: false
    extra_vars: "terminate_tower=true tower_password={{ tower_password }} tower_inventory={{ tower_inventory }} aws_region={{ aws_region }}"
    job_template: "update"

# Tower Workflow Assets for self_configure job
# Set to true to launch the job at the end of the configuration. Set to true will only have an effect if also setting tower_config: true. This is useful for full end to end testing.
tower_job_self_configure_launch: false
# Workflow job timeout in seconds
tower_job_self_configure_launch_async: 300
# Workflow job polling
tower_job_self_configure_launch_poll: 15

# Tower Workflow Assets for Deploy job
tower_workflow_template_deploy: "1-Deploy_OpenShift_on_AWS"
tower_workflow_template_deploy_config: false
tower_workflow_template_deploy_description: "Deploy OpenShift on AWS."
# Place any variables that will be available to all job templates and inventory hosts
tower_workflow_template_deploy_extra_vars: "tower_workflow_template_deploy_extra_vars.yml"
# Wire up job_templates for Deploy in this file
tower_workflow_template_deploy_schema_path: "tower_workflow_template_deploy_schema.yml"
# Set to true to launch the workflow job at the end of the configuration. Set to true will only have an effect if also setting tower_config: true. This is useful for full end to end testing.
tower_workflow_job_deploy_launch: false
# Workflow job timeout in seconds
tower_workflow_job_deploy_launch_async: 2700
# Workflow job polling
tower_workflow_job_deploy_launch_poll: 60

# Tower Workflow Assets for Scaleup job
tower_workflow_template_scaleup: "2-Scaleup_OpenShift_on_AWS"
tower_workflow_template_scaleup_config: false
tower_workflow_template_scaleup_description: "Scaleup OpenShift on AWS"
# Place any variables that will be available to all job templates and inventory hosts
tower_workflow_template_scaleup_extra_vars: "{{ tower_workflow_template_deploy_extra_vars }}"
# Wire up job_templates for Scaleup in this file
tower_workflow_template_scaleup_schema_path: "tower_workflow_template_scaleup_schema.yml"
# Set to true to launch the workflow job at the end of the configuration. Set to true will only have an effect if also setting tower_config: true. This is useful for full end to end testing.
tower_workflow_job_scaleup_launch: false
# Workflow job timeout in seconds
tower_workflow_job_scaleup_launch_async: 1200
# Workflow job polling
tower_workflow_job_scaleup_launch_poll: 60

# Tower Workflow Assets for Terminate job
tower_workflow_template_terminate: "3-Terminate_All"
tower_workflow_template_terminate_config: false
tower_workflow_template_terminate_description: "Terminate instances (including self) on AWS"
# Wire up job_templates for Terminate in this file
tower_workflow_template_terminate_schema_path: "tower_workflow_template_terminate_schema.yml"
# Set to true to launch the workflow job at the end of the configuration. Set to true will only have an effect if also setting tower_config: true. This is useful for full end to end testing.
tower_workflow_job_terminate_launch: false
# Workflow job timeout in seconds
tower_workflow_job_terminate_launch_async: 360
# Workflow job polling
tower_workflow_job_terminate_launch_poll: 0
...
